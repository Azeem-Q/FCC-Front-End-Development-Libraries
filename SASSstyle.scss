// Store Data with Sass Variables 

/*
$text-color: red;

.header {
    text-align: center;
}
.blog-post, h2 {
    color: $text-color;
}
*/

// Nest CSS with Sass
/*
.blog-post {
    h1 {
        text-align: center;
        color: blue;
    }
        p {
            font-size: 20px;
        }
}
*/

// Create Reusable CSS with Mixins
/*
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}
#awesome {
    width: 150px;
    height: 150px;
    background-color: green;
    @include border-radius(15px);
}
*/

// Use @if and @else to Add Logic To Your Styles
/*
@mixin border-stroke($val) {
    @if $val == light {
        border: 1px solid black;        
    }
    @else if $val == medium {
        border: 3px solid black;
    }
    @else if $val == heavy {
        border: 6px solid black;
    }
    @else {
        border: none;
    }
}
#box {
    width: 150px;
    height: 150px;
    background-color: red;
    @include border-stroke(medium);
}
*/

// Use @for to Create a Sass Loop
//
// @for $j from 1 to 6 {
//    .text-#{$j} {font-size: 15px * $j;}
//}



// Use @each to Map Over Items in a List

//$color-list: (blue, black, red);

//@each $color in $color-list {
  //  .#{'' + $color}-bg {background-color: $color;}   
//}
/*
div {
    height: 200px;
    width: 200px;
}
*/

// Apply a Style Until a Condition is Met with @while

//$x: 1;

//@while $x < 6 {
  //  .text-#{$x} {font-size: 15px * $x;}
    //$x: $x + 1;
//}

// Split Your Styles into Smaller Chunks with Partials

